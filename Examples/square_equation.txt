in
pop rax
in
pop rbx
in
pop rcx

call :CheckNullCoefs

push -1
push rbx
mul
push 2
div
pop [0]

push rdx
sqrt
pop [1]

push [0]
push [1]
add 
out

push [0]
push [1]
sub
out

noSolutions:

hlt

CheckNullCoefs:
	push rax
	push 0
	je  :isNullA	

	jne :isNotNullA

	isNullA:
		push rbx
		push 0
		je  :isNullB

		jmp :isNotNullB	

		isNullB:
			push rbx
			push 0 
			jmp :end

	isNotNullA:
		call :CountD
		push rdx
		out rdx

	end:
	ret

CountD:
	push rbx
	push rbx
	mul
 
	push rax
	push rcx
	mul
	push 4
	mul
	
	sub
	pop rdx

	call :A 

	ret

A:
	out [50]
	ret




