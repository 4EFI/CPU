in
pop rax
in
pop rbx
in
pop rcx

out [0]

call :Abbb

out [1]

push -1
push rbx
mul
push 2
div
pop [0]

push rdx
sqrt
pop [1]

push [0]
push [1]
add 
out

push [0]
push [1]
sub
out

dump

hlt

CheckNullCoefs:
	push rax
	push 0
	je :isNullA	

	push rax
	push 0
	jne :isNotNullA

	isNullA:
		push rbx
		push 0
		je :isNullB
	
		push rbx
		push 0
		jne :isNotNullB	

		isNullB:
			push rbx
			push 0 
			jne :isNullB

	isNotNullA:
		call :CountD
		push rdx
		out [0]
	
	ret

CountD:
	push rbx
	push rbx
	mul
 
	push rax
	push rcx
	mul
	push 4
	mul
	
	sub
	pop rdx 

	ret

Abbb:
	out [4]
	ret




